// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  fullName      String
  userName      String    @unique
  password      String
  role          UserRole  @default(user)
  profileImg    String?
  distributorId String?
  distributor   Customer? @relation(fields: [distributorId], references: [id])
  isActive      Boolean   @default(true)

  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  menus        MenuPermission[]
  subMenus     SubMenuPermission[]
  sections     SectionPermission[]
  invoices     Invoice[]
  bills        Bill[]
  expenses     Expense[]
  orders       Order[]
  voucher      Voucher[]
  distInvoices DistInvoice[]
  distVouchers DistVoucher[]
  distExpenses DistExpense[]
  fosInvoices  FosInvoice[]
  drInvoices   DrInvoice[]
  drVouchers   DrVoucher[]

  @@map("users")
}

model MenuPermission {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menuPermissions")
}

model SubMenuPermission {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subMenuPermissions")
}

model SectionPermission {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sectionPermissions")
}

// account sections
model AccountType {
  id           String        @id @default(uuid())
  label        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accountHeads AccountHead[]

  @@map("accountTypes")
}

model AccountHead {
  id            String       @id @default(uuid())
  accountTypeId String
  accountType   AccountType  @relation(fields: [accountTypeId], references: [id])
  label         String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  invoices      Invoice[]
  bills         Bill[]
  Eexpenses     Expense[]
  vouchers      Voucher[]
  fixedAssets   FixedAsset[]
  investments   Investment[]
  withdraws     Withdraw[]

  @@map("accountHeads")
}

model PaymentMethod {
  id        String   @id @default(uuid())
  label     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("paymentMethods")
}

// customer
model CustomerGroup {
  id        String     @id @default(uuid())
  label     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customers Customer[]

  @@map("customerGroups")
}

// customer
model Customer {
  id             String         @id @default(uuid())
  customerId     String         @unique
  customerName   String
  customerNameBn String?
  mobile         String?
  address        String?
  groupId        String?
  group          CustomerGroup? @relation(fields: [groupId], references: [id])
  isDistributor  Boolean        @default(false)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  invoices       Invoice[]
  orders         Order[]
  vouchers       Voucher[]
  users          User[]
  distClients    DistClient[]
  distExpenses   DistExpense[]

  @@map("customers")
}

// vendor
model Vendor {
  id           String        @id @default(uuid())
  vendorId     String        @unique
  vendorName   String
  vendorNameBn String?
  mobile       String?
  address      String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bills        Bill[]
  equipmentIns EquipmentIn[]
  expenses     Expense[]
  vouchers     Voucher[]

  @@map("vendors")
}

// product
model Product {
  id                   String                @id @default(uuid())
  productId            String                @unique
  label                String                @unique
  description          String?
  uom                  String
  price                Float
  isDist               Boolean               @default(false)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  invoicedProducts     InvoicedProduct[]
  orderedProducts      OrderedProduct[]
  distInvoicedProducts DistInvoicedProduct[]
}

// order
model Order {
  id              String           @id @default(uuid())
  orderNo         String           @unique
  date            DateTime
  deliveryDate    DateTime
  totalQty        Float
  totalPrice      Float
  customerId      String
  customer        Customer         @relation(fields: [customerId], references: [id])
  status          OrderStatus      @default(Pending)
  userId          String
  preparedBy      User             @relation(fields: [userId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderedProducts OrderedProduct[]
  invoices        Invoice[]
}

model OrderedProduct {
  id         String  @id @default(uuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Float
  unitPrice  Float
  totalPrice Float
}

// invoice
model Invoice {
  id               String            @id @default(uuid())
  invoiceNo        String            @unique
  date             DateTime
  customerId       String
  customer         Customer          @relation(fields: [customerId], references: [id])
  accountHeadId    String
  accountHead      AccountHead       @relation(fields: [accountHeadId], references: [id])
  totalQty         Float
  totalPrice       Float
  discount         Float
  amount           Float
  paidAmount       Float             @default(0)
  orderId          String?
  refNo            Order?            @relation(fields: [orderId], references: [id])
  status           InvoiceBillStatus @default(Due)
  userId           String
  preparedBy       User              @relation(fields: [userId], references: [id])
  version          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  invoicedProducts InvoicedProduct[]
  voucherDetails   VoucherDetail[]

  @@map("invoices")
}

model InvoicedProduct {
  id         String  @id @default(uuid())
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  unitPrice  Float
  quantity   Float
  totalPrice Float

  @@map("invoicedProducts")
}

// bill
model Bill {
  id             String            @id @default(uuid())
  billNo         String            @unique
  date           DateTime
  vendorId       String
  vendor         Vendor            @relation(fields: [vendorId], references: [id])
  accountHeadId  String
  accountHead    AccountHead       @relation(fields: [accountHeadId], references: [id])
  totalQty       Float
  totalPrice     Float
  discount       Float
  amount         Float
  paidAmount     Float             @default(0)
  refNo          String?
  status         InvoiceBillStatus @default(Due)
  userId         String
  preparedBy     User              @relation(fields: [userId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  billEquipments BillEquipment[]
  equipmentIns   EquipmentIn[]
  voucherDetails VoucherDetail[]

  @@map("bills")
}

model BillEquipment {
  id          String    @id @default(uuid())
  billId      String
  bill        Bill      @relation(fields: [billId], references: [id])
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  unitPrice   Float
  quantity    Float
  totalPrice  Float

  @@map("billEquipments")
}

// inventory
model Uom {
  id        String   @id @default(uuid())
  label     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("uom")
}

model Equipment {
  id             String          @id @default(uuid())
  equipmentCode  String          @unique
  label          String          @unique
  uom            String?
  isAsset        Boolean
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  billEquipments BillEquipment[]
  equipmentIns   EquipmentIn[]
  equipmentOuts  EquipmentOut[]

  @@map("equipments")
}

model EquipmentIn {
  id          String    @id @default(uuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  date        DateTime
  quantity    Float
  unitPrice   Float
  totalPrice  Float
  usedQty     Float?
  vendorId    String?
  vendor      Vendor?   @relation(fields: [vendorId], references: [id])
  billId      String?
  bill        Bill?     @relation(fields: [billId], references: [id])
  remarks     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("equipmentIns")
}

model EquipmentOut {
  id          String    @id @default(uuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  date        DateTime
  quantity    Float
  remarks     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("equipmentOuts")
}

// expense
model ExpenseHead {
  id           String        @id @default(uuid())
  label        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  expenses     Expense[]
  distExpenses DistExpense[]

  @@map("expenseHeads")
}

model Expense {
  id             String      @id @default(uuid())
  date           DateTime
  accountHeadId  String
  accountHead    AccountHead @relation(fields: [accountHeadId], references: [id])
  expenseHeadId  String
  expenseHead    ExpenseHead @relation(fields: [expenseHeadId], references: [id])
  vendorId       String?
  vendor         Vendor?     @relation(fields: [vendorId], references: [id])
  amount         Float
  expenseDetails String?
  remarks        String?
  userId         String
  preparedBy     User        @relation(fields: [userId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("expenses")
}

model Voucher {
  id             String          @id @default(uuid())
  voucherNo      String          @unique
  type           VoucherType
  date           DateTime
  amount         Int
  accountHeadId  String
  accountHead    AccountHead     @relation(fields: [accountHeadId], references: [id])
  customerId     String?
  customer       Customer?       @relation(fields: [customerId], references: [id])
  vendorId       String?
  vendor         Vendor?         @relation(fields: [vendorId], references: [id])
  narration      String?
  userId         String
  version        Boolean         @default(false)
  user           User            @relation(fields: [userId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  voucherDetails VoucherDetail[]

  @@map("vouchers")
}

model VoucherDetail {
  id            String   @id @default(uuid())
  voucherId     String
  voucher       Voucher  @relation(fields: [voucherId], references: [id])
  invoiceId     String?
  invoice       Invoice? @relation(fields: [invoiceId], references: [id])
  billId        String?
  bill          Bill?    @relation(fields: [billId], references: [id])
  receiveAmount Int

  @@map("voucherDetails")
}

model Asset {
  id        String @id @default(uuid())
  assetCode String @unique
  label     String @unique

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fixedAssets FixedAsset[]

  @@map("assets")
}

model FixedAsset {
  id            String      @id @default(uuid())
  date          DateTime
  accountHeadId String
  accountHead   AccountHead @relation(fields: [accountHeadId], references: [id])
  assetId       String
  asset         Asset       @relation(fields: [assetId], references: [id])
  quantity      Int
  amount        Int
  remarks       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("fixedAssets")
}

model Investment {
  id            String      @id @default(uuid())
  date          DateTime
  accountHeadId String
  accountHead   AccountHead @relation(fields: [accountHeadId], references: [id])
  amount        Int
  isCash        Boolean     @default(false)
  remarks       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("investments")
}

model Withdraw {
  id            String      @id @default(uuid())
  date          DateTime
  accountHeadId String
  accountHead   AccountHead @relation(fields: [accountHeadId], references: [id])
  amount        Int
  remarks       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("withdraws")
}

// income expense
model IncomeExpenseCategory {
  id    String @id @default(uuid())
  label String @unique

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  incomeExpenses     IncomeExpense[]
  incomeExpenseHeads IncomeExpenseHead[]

  @@map("categories")
}

model IncomeExpenseHead {
  id         String                @id @default(uuid())
  type       IncomeExpenseType
  categoryId String
  category   IncomeExpenseCategory @relation(fields: [categoryId], references: [id])
  label      String

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  incomeExpenses IncomeExpense[]

  @@unique([type, categoryId, label])
  @@map("incomeExpenseHeads")
}

model ModeOfPayment {
  id    String @id @default(uuid())
  label String @unique

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  incomeExpenses IncomeExpense[]

  @@map("modeOfPayments")
}

model IncomeExpense {
  id                  String                @id @default(uuid())
  type                IncomeExpenseType
  date                DateTime
  categoryId          String
  category            IncomeExpenseCategory @relation(fields: [categoryId], references: [id])
  incomeExpenseHeadId String
  incomeExpenseHead   IncomeExpenseHead     @relation(fields: [incomeExpenseHeadId], references: [id])
  amount              Int
  modeOfPaymentId     String
  modeOfPayment       ModeOfPayment         @relation(fields: [modeOfPaymentId], references: [id])
  remarks             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("incomeExpenses")
}

// distribution

// client list
model DistClient {
  id             String  @id @default(uuid())
  customerId     String  @unique
  customerName   String
  customerNameBn String?
  mobile         String?
  address        String?
  isActive       Boolean @default(true)

  distributorId String
  distributor   Customer @relation(fields: [distributorId], references: [id])

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  distInvoices DistInvoice[]
  distVouchers DistVoucher[]

  @@map("distClients")
}

// vendor list
model DistVendor {
  id           String  @id @default(uuid())
  vendorId     String  @unique
  vendorName   String
  vendorNameBn String?
  mobile       String?
  address      String?
  isActive     Boolean @default(true)

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  distVouchers DistVoucher[]

  @@map("distVendors")
}

// dist invoice
model DistInvoice {
  id         String            @id @default(uuid())
  invoiceNo  String            @unique
  date       DateTime
  customerId String
  customer   DistClient        @relation(fields: [customerId], references: [id])
  totalQty   Float
  totalPrice Float
  discount   Float
  amount     Float
  paidAmount Float             @default(0)
  status     InvoiceBillStatus @default(Due)

  userId     String
  preparedBy User   @relation(fields: [userId], references: [id])

  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  distInvoicedProducts DistInvoicedProduct[]
  distVoucherDetails   DistVoucherDetail[]

  @@map("distInvoices")
}

model DistInvoicedProduct {
  id         String      @id @default(uuid())
  invoiceId  String
  invoice    DistInvoice @relation(fields: [invoiceId], references: [id])
  productId  String
  product    Product     @relation(fields: [productId], references: [id])
  unitPrice  Float
  quantity   Float
  totalPrice Float

  @@map("distInvoicedProducts")
}

// dist voucher
model DistVoucher {
  id                 String              @id @default(uuid())
  voucherNo          String              @unique
  type               VoucherType
  date               DateTime
  amount             Int
  customerId         String?
  customer           DistClient?         @relation(fields: [customerId], references: [id])
  vendorId           String?
  vendor             DistVendor?         @relation(fields: [vendorId], references: [id])
  narration          String?
  userId             String
  user               User                @relation(fields: [userId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  distVoucherDetails DistVoucherDetail[]

  @@map("distVouchers")
}

model DistVoucherDetail {
  id            String       @id @default(uuid())
  voucherId     String
  voucher       DistVoucher  @relation(fields: [voucherId], references: [id])
  invoiceId     String?
  invoice       DistInvoice? @relation(fields: [invoiceId], references: [id])
  receiveAmount Int

  @@map("distVoucherDetails")
}

model DistExpense {
  id            String      @id @default(uuid())
  date          DateTime
  distributorId String
  distributor   Customer    @relation(fields: [distributorId], references: [id])
  expenseHeadId String
  expenseHead   ExpenseHead @relation(fields: [expenseHeadId], references: [id])
  vendor        String?
  amount        Float
  remarks       String?

  userId     String
  preparedBy User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("distExpenses")
}

// free of cost area
// fos customer
model FosCustomer {
  id             String  @id @default(uuid())
  customerId     String  @unique
  customerName   String
  customerNameBn String?
  mobile         String?
  address        String?
  isActive       Boolean @default(true)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fosInvoices FosInvoice[]

  @@map("fosCustomers")
}

// fos product
model FosProduct {
  id          String  @id @default(uuid())
  productId   String  @unique
  label       String  @unique
  description String?
  uom         String
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fosInvoicedProducts FosInvoicedProduct[]

  @@map("fosProducts")
}

// fos invoice
model FosInvoice {
  id            String      @id @default(uuid())
  invoiceNo     String      @unique
  date          DateTime
  fosCustomerId String
  fosCustomer   FosCustomer @relation(fields: [fosCustomerId], references: [id])
  totalQty      Float

  userId     String
  preparedBy User   @relation(fields: [userId], references: [id])

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  fosInvoicedProducts FosInvoicedProduct[]

  @@map("fosInvoices")
}

model FosInvoicedProduct {
  id           String     @id @default(uuid())
  fosInvoiceId String
  fosInvoice   FosInvoice @relation(fields: [fosInvoiceId], references: [id])
  fosProductId String
  fosProduct   FosProduct @relation(fields: [fosProductId], references: [id])
  quantity     Float

  @@map("fosInvoicedProducts")
}

// Dr separate
model DrCustomer {
  id             String  @id @default(uuid())
  customerId     String  @unique
  customerName   String
  customerNameBn String?
  mobile         String?
  address        String?

  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  drInvoices DrInvoice[]
  drVouchers DrVoucher[]

  @@map("drCustomers")
}

// dr product
model DrProduct {
  id          String  @id @default(uuid())
  productId   String  @unique
  label       String  @unique
  description String?
  uom         String
  price       Float

  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  drInvoicedProducts DrInvoicedProduct[]

  @@map("drProducts")
}

// Dr invoice
model DrInvoice {
  id                 String              @id @default(uuid())
  invoiceNo          String              @unique
  date               DateTime
  customerId         String
  customer           DrCustomer          @relation(fields: [customerId], references: [id])
  totalQty           Float
  totalPrice         Float
  discount           Float
  amount             Float
  paidAmount         Float               @default(0)
  status             InvoiceBillStatus   @default(Due)
  userId             String
  preparedBy         User                @relation(fields: [userId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  drInvoicedProducts DrInvoicedProduct[]
  drVoucherDetails   DrVoucherDetail[]

  @@map("drInvoices")
}

model DrInvoicedProduct {
  id         String    @id @default(uuid())
  invoiceId  String
  invoice    DrInvoice @relation(fields: [invoiceId], references: [id])
  productId  String
  product    DrProduct @relation(fields: [productId], references: [id])
  unitPrice  Float
  quantity   Float
  totalPrice Float

  @@map("drInvoicedProducts")
}

// dr voucher
model DrVoucher {
  id               String            @id @default(uuid())
  voucherNo        String            @unique
  date             DateTime
  amount           Int
  customerId       String
  customer         DrCustomer        @relation(fields: [customerId], references: [id])
  narration        String?
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  drVoucherDetails DrVoucherDetail[]

  @@map("drVouchers")
}

model DrVoucherDetail {
  id            String     @id @default(uuid())
  voucherId     String
  voucher       DrVoucher  @relation(fields: [voucherId], references: [id])
  invoiceId     String?
  invoice       DrInvoice? @relation(fields: [invoiceId], references: [id])
  receiveAmount Int

  @@map("drVoucherDetails")
}

// electricity management
model Meter {
  id           String  @id @default(uuid())
  label        String
  smsAccount   String?
  customerName String?
  location     String?
  remarks      String?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  electricityBills ElectricityBill[]

  @@map("meters")
}

model ElectricityBill {
  id            String                @id @default(uuid())
  date          DateTime?
  meterId       String
  meter         Meter                 @relation(fields: [meterId], references: [id])
  month         String
  year          String
  meterReading  Int?                  @default(0)
  unit          Int?                  @default(0)
  unitDetails   String?
  netBill       Int?                  @default(0)
  serviceCharge Int?                  @default(0)
  amount        Int
  paidBy        String
  remarks       String?
  status        ElectricityBillStatus @default(Due)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([meterId, month, year])
  @@map("electricityBills")
}

// building expenses
model BuildingExpenseHead {
  id    String @id @default(uuid())
  label String @unique

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buildingExpenses BuildingExpense[]

  @@map("buildingExpenseHeads")
}

model BuildingVendor {
  id        String  @id @default(uuid())
  label     String  @unique
  contactNo String?
  address   String?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buildingExpenses BuildingExpense[]

  @@map("buildingVendors")
}

model BuildingBrand {
  id    String @id @default(uuid())
  label String @unique

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buildingExpenses BuildingExpense[]

  @@map("buildingBrands")
}

model BuildingUom {
  id    String @id @default(uuid())
  label String @unique

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buildingExpenses BuildingExpense[]

  @@map("buildingUom")
}

model BuildingExpense {
  id            String              @id @default(uuid())
  date          DateTime
  expenseHeadId String
  expenseHead   BuildingExpenseHead @relation(fields: [expenseHeadId], references: [id])
  vendorId      String
  vendor        BuildingVendor      @relation(fields: [vendorId], references: [id])
  brandId       String?
  brand         BuildingBrand?      @relation(fields: [brandId], references: [id])
  uomId         String
  uom           BuildingUom         @relation(fields: [uomId], references: [id])
  quantity      Float
  unitPrice     Float
  amount        Float
  paidAmount    Float               @default(0)
  remarks       String?
  status        InvoiceBillStatus   @default(Due)

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buildingPayments BuildingPayment[]

  @@map("buildingExpenses")
}

model BuildingPaymentMethod {
  id    String @id @default(uuid())
  label String @unique

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buildingPayments BuildingPayment[]

  @@map("buildingPaymentMethods")
}

model BuildingPayment {
  id              String                @id @default(uuid())
  expenseId       String
  expense         BuildingExpense       @relation(fields: [expenseId], references: [id])
  date            DateTime
  paymentMethodId String
  paymentMethod   BuildingPaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentDetails  String?
  amount          Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("buildingPayments")
}

model BuildingInvestmentSource {
  id    String @id @default(uuid())
  label String @unique

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  buildingInvestments BuildingInvestment[]

  @@map("buildingInvestmentSources")
}

model BuildingInvestment {
  id                 String                   @id @default(uuid())
  date               DateTime
  investmentSourceId String
  investmentSource   BuildingInvestmentSource @relation(fields: [investmentSourceId], references: [id])
  amount             Int
  investmentDetails  String
  remarks            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("buildingInvestments")
}

// monthly expense
model ExpenseArea {
  id          String  @id @default(uuid())
  label       String  @unique
  description String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  monthlyExpenses MonthlyExpense[]

  @@map("expenseAreas")
}

model Vehicle {
  id          String  @id @default(uuid())
  label       String  @unique
  description String?
  isActive    Boolean @default(true)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  monthlyExpenses MonthlyExpense[]

  @@map("vehicles")
}

model MonthlyExpenseHead {
  id          String  @id @default(uuid())
  label       String  @unique
  description String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  monthlyExpenses MonthlyExpense[]

  @@map("monthlyExpenseHeads")
}

model ExpenseDetail {
  id    String @id @default(uuid())
  label String @unique

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  MonthlyExpense MonthlyExpense[]

  @@map("expenseDetails")
}

model PaymentSource {
  id          String  @id @default(uuid())
  label       String  @unique
  limit       Float   @default(0)
  description String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  monthlyExpenses MonthlyExpense[]

  @@map("paymentSources")
}

model Source {
  id          String  @id @default(uuid())
  label       String  @unique
  description String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  openingBalances OpeningBalance[]

  @@map("sources")
}

model MonthlyExpense {
  id                   String             @id @default(uuid())
  year                 String
  month                String
  date                 DateTime
  expenseAreaId        String
  expenseArea          ExpenseArea        @relation(fields: [expenseAreaId], references: [id])
  vehicleId            String?
  vehicle              Vehicle?           @relation(fields: [vehicleId], references: [id])
  monthlyExpenseHeadId String
  monthlyExpenseHead   MonthlyExpenseHead @relation(fields: [monthlyExpenseHeadId], references: [id])
  expenseDetailId      String?
  expenseDetail        ExpenseDetail?     @relation(fields: [expenseDetailId], references: [id])
  expenseDetails       String?
  amount               Float
  paymentSourceId      String
  paymentSource        PaymentSource      @relation(fields: [paymentSourceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("monthlyExpenses")
}

model OpeningBalance {
  id       String    @id @default(uuid())
  sourceId String?
  source   Source?   @relation(fields: [sourceId], references: [id])
  date     DateTime?
  year     String
  month    String
  amount   Float
  remarks  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("openingBalances")
}

model Recipient {
  id       String  @id @default(uuid())
  fullName String
  mobile   String?
  address  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  zakats    Zakat[]

  @@map("recipients")
}

model Zakat {
  id          String    @id @default(uuid())
  year        String
  recipientId String
  recipient   Recipient @relation(fields: [recipientId], references: [id])
  amount      Float
  remarks     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([year, recipientId])
  @@map("zakats")
}

// Jewellery
model JewelleryType {
  id    String @id @default(uuid())
  label String @unique

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  jewelleries Jewellery[]

  @@map("jewelleryTypes")
}

model Carat {
  id       String            @id @default(uuid())
  label    String
  category JewelleryCategory @default(GOLD)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  jewelleries   Jewellery[]
  JewelleryRate JewelleryRate[]

  @@unique([label, category])
  @@map("carats")
}

model JewelleryVendor {
  id      String  @id @default(uuid())
  label   String  @unique
  mobile  String?
  address String?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  jewelleries Jewellery[]

  @@map("jewelleryVendors")
}

model Jewellery {
  id              String            @id @default(uuid())
  category        JewelleryCategory @default(GOLD)
  jewelleryTypeId String
  jewelleryType   JewelleryType     @relation(fields: [jewelleryTypeId], references: [id])
  caratId         String
  carat           Carat             @relation(fields: [caratId], references: [id])
  vendorId        String
  vendor          JewelleryVendor   @relation(fields: [vendorId], references: [id])
  invoiceNo       String
  dop             DateTime
  year            String
  month           String
  weight          Float
  price           Int
  remarks         String?
  isSold          Boolean           @default(false)
  isExchanged     Boolean           @default(false)
  soldDate        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jewelleries")
}

model JewelleryRate {
  id      String @id @default(uuid())
  date    String
  caratId String
  carat   Carat  @relation(fields: [caratId], references: [id])
  price   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, caratId])
  @@map("jewelleryRates")
}

// ENUMS
enum UserRole {
  super_admin
  admin
  user
}

enum InvoiceBillStatus {
  Due
  Partial
  Canceled
  Paid
}

enum ElectricityBillStatus {
  Due
  Paid
}

enum OrderStatus {
  Pending
  Delivered
  Canceled
}

enum VoucherType {
  Paid
  Received
}

enum IncomeExpenseType {
  Income
  Expense
}

enum JewelleryCategory {
  DIAMOND
  GOLD
  SILVER
}
